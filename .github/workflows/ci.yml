name: ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        compiler:
          - llvm
          - gcc
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        developer_mode:
          - ON
          - OFF

        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: windows
            compiler: gcc

          # Process aborted? Why?
          - os: macos-latest
            compiler: llvm
            build_type: Release
            developer_mode: ON

        include:
          # Add appropriate variables for gcov version required. This will
          # intentionally break if you try to use a compiler that does not have
          # gcov set
          - compiler: gcc
            gcov_executable: gcov
          - compiler: llvm
            gcov_executable: "llvm-cov gcov"

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            developer_mode: OFF
            package_generator: TBZ2

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-latest
            compiler: gcc
            generator: "Unix Makefiles"
            build_type: Debug
            gcov_executable: gcov
            developer_mode: On

          # Remove because ASAN FAILURE on MSVC with DEVELOPER_MODE
          #- os: windows-latest
            #compiler: msvc
            #generator: "Visual Studio 17 2022"
            #build_type: Debug
            #developer_mode: On

          # Remove because ASAN FAILURE on MSVC with DEVELOPER_MODE
          #- os: windows-latest
            #compiler: msvc
            #generator: "Visual Studio 17 2022"
            #build_type: Release
            #developer_mode: On

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            developer_mode: Off

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            developer_mode: Off
            package_generator: ZIP

    steps:
      - uses: actions/checkout@v2

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          clangtidy: true

          cppcheck: true

          gcovr: true
          opencppcoverage: true

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: >
            sudo apt update;
            sudo apt install
            xorg-dev
            libgl1-mesa-dev
            libpulse-dev

        # make sure coverage is only enabled for Debug builds, since it sets -O0
        # to make sure coverage has meaningful results
      - name: Configure CMake
        run: >
          cmake -S .
          -B ./build
          -G "${{matrix.generator}}"
          -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}}
          -DENABLE_DEVELOPER_MODE:BOOL=${{matrix.developer_mode}}
          -DOPT_ENABLE_COVERAGE:BOOL=${{matrix.build_type == 'Debug' }}
          -DGIT_SHA:STRING=${{ github.sha }};

      - name: Build
        # Execute the build.  You can specify a specific target with "--target
        # <NAME>"
        run: >
          cmake
          --build ./build
          --config ${{matrix.build_type}};

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more
        # detail
        run: >
          ctest -C ${{matrix.build_type}};
          gcovr
          -j ${{env.nproc}}
          --delete
          --root ../
          --print-summary
          --xml-pretty
          --xml
          coverage.xml
          .
          --gcov-executable '${{ matrix.gcov_executable }}';

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ./build
        run: >
          OpenCppCoverage.exe
          --export_type cobertura:coverage.xml
          --cover_children
          --
          ctest -C ${{matrix.build_type}};

      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ./build
        run: >
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}};

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
